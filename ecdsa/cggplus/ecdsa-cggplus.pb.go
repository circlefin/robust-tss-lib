// Copyright (c) 2023, Circle Internet Financial, LTD. All rights reserved.
//
//  SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: protob/ecdsa-cggplus.proto

package cggplus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a broadcast message during Round 1 of the accountable cgg+ ECDSA TSS signing protocol.
type SignRound1Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigG []byte   `protobuf:"bytes,1,opt,name=bigG,proto3" json:"bigG,omitempty"`
	BigK []byte   `protobuf:"bytes,2,opt,name=bigK,proto3" json:"bigK,omitempty"`
	Psi  [][]byte `protobuf:"bytes,3,rep,name=psi,proto3" json:"psi,omitempty"`
}

func (x *SignRound1Message) Reset() {
	*x = SignRound1Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_cggplus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound1Message) ProtoMessage() {}

func (x *SignRound1Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_cggplus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound1Message.ProtoReflect.Descriptor instead.
func (*SignRound1Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_cggplus_proto_rawDescGZIP(), []int{0}
}

func (x *SignRound1Message) GetBigG() []byte {
	if x != nil {
		return x.BigG
	}
	return nil
}

func (x *SignRound1Message) GetBigK() []byte {
	if x != nil {
		return x.BigK
	}
	return nil
}

func (x *SignRound1Message) GetPsi() [][]byte {
	if x != nil {
		return x.Psi
	}
	return nil
}

// Represents a broadcast message during Round 2 of the accountable cgg+ ECDSA TSS signing protocol.
type SignRound2Message1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient []byte   `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	BigD      []byte   `protobuf:"bytes,2,opt,name=big_d,json=bigD,proto3" json:"big_d,omitempty"`
	BigDHat   []byte   `protobuf:"bytes,3,opt,name=big_d_hat,json=bigDHat,proto3" json:"big_d_hat,omitempty"`
	BigF      []byte   `protobuf:"bytes,4,opt,name=big_f,json=bigF,proto3" json:"big_f,omitempty"`
	BigFHat   []byte   `protobuf:"bytes,5,opt,name=big_f_hat,json=bigFHat,proto3" json:"big_f_hat,omitempty"`
	Psi       [][]byte `protobuf:"bytes,6,rep,name=psi,proto3" json:"psi,omitempty"`
	PsiHat    [][]byte `protobuf:"bytes,7,rep,name=psi_hat,json=psiHat,proto3" json:"psi_hat,omitempty"`
}

func (x *SignRound2Message1) Reset() {
	*x = SignRound2Message1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_cggplus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound2Message1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound2Message1) ProtoMessage() {}

func (x *SignRound2Message1) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_cggplus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound2Message1.ProtoReflect.Descriptor instead.
func (*SignRound2Message1) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_cggplus_proto_rawDescGZIP(), []int{1}
}

func (x *SignRound2Message1) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *SignRound2Message1) GetBigD() []byte {
	if x != nil {
		return x.BigD
	}
	return nil
}

func (x *SignRound2Message1) GetBigDHat() []byte {
	if x != nil {
		return x.BigDHat
	}
	return nil
}

func (x *SignRound2Message1) GetBigF() []byte {
	if x != nil {
		return x.BigF
	}
	return nil
}

func (x *SignRound2Message1) GetBigFHat() []byte {
	if x != nil {
		return x.BigFHat
	}
	return nil
}

func (x *SignRound2Message1) GetPsi() [][]byte {
	if x != nil {
		return x.Psi
	}
	return nil
}

func (x *SignRound2Message1) GetPsiHat() [][]byte {
	if x != nil {
		return x.PsiHat
	}
	return nil
}

// Represents a broadcast message during Round 2 of the accountable cgg+ ECDSA TSS signing protocol.
type SignRound2Message2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointGamma [][]byte `protobuf:"bytes,1,rep,name=point_gamma,json=pointGamma,proto3" json:"point_gamma,omitempty"`
	PsiPrime   [][]byte `protobuf:"bytes,2,rep,name=psi_prime,json=psiPrime,proto3" json:"psi_prime,omitempty"`
}

func (x *SignRound2Message2) Reset() {
	*x = SignRound2Message2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_cggplus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound2Message2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound2Message2) ProtoMessage() {}

func (x *SignRound2Message2) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_cggplus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound2Message2.ProtoReflect.Descriptor instead.
func (*SignRound2Message2) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_cggplus_proto_rawDescGZIP(), []int{2}
}

func (x *SignRound2Message2) GetPointGamma() [][]byte {
	if x != nil {
		return x.PointGamma
	}
	return nil
}

func (x *SignRound2Message2) GetPsiPrime() [][]byte {
	if x != nil {
		return x.PsiPrime
	}
	return nil
}

// Represents a broadcast message during Round 3 of the accountable cgg+ ECDSA TSS signing protocol.
type SignRound3Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta         []byte   `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	BigDelta      [][]byte `protobuf:"bytes,2,rep,name=bigDelta,proto3" json:"bigDelta,omitempty"`
	H             []byte   `protobuf:"bytes,3,opt,name=h,proto3" json:"h,omitempty"`
	PsiPrimePrime [][]byte `protobuf:"bytes,4,rep,name=psi_prime_prime,json=psiPrimePrime,proto3" json:"psi_prime_prime,omitempty"`
	HProof        [][]byte `protobuf:"bytes,5,rep,name=h_proof,json=hProof,proto3" json:"h_proof,omitempty"`
	DeltaProof    [][]byte `protobuf:"bytes,6,rep,name=delta_proof,json=deltaProof,proto3" json:"delta_proof,omitempty"`
}

func (x *SignRound3Message) Reset() {
	*x = SignRound3Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_cggplus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound3Message) ProtoMessage() {}

func (x *SignRound3Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_cggplus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound3Message.ProtoReflect.Descriptor instead.
func (*SignRound3Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_cggplus_proto_rawDescGZIP(), []int{3}
}

func (x *SignRound3Message) GetDelta() []byte {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *SignRound3Message) GetBigDelta() [][]byte {
	if x != nil {
		return x.BigDelta
	}
	return nil
}

func (x *SignRound3Message) GetH() []byte {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *SignRound3Message) GetPsiPrimePrime() [][]byte {
	if x != nil {
		return x.PsiPrimePrime
	}
	return nil
}

func (x *SignRound3Message) GetHProof() [][]byte {
	if x != nil {
		return x.HProof
	}
	return nil
}

func (x *SignRound3Message) GetDeltaProof() [][]byte {
	if x != nil {
		return x.DeltaProof
	}
	return nil
}

// Represents a broadcast message during Round 4 of the accountable cgg+ ECDSA TSS signing protocol.
type SignRound4Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignRound4Message) Reset() {
	*x = SignRound4Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_cggplus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound4Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound4Message) ProtoMessage() {}

func (x *SignRound4Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_cggplus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound4Message.ProtoReflect.Descriptor instead.
func (*SignRound4Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_cggplus_proto_rawDescGZIP(), []int{4}
}

// Represents a broadcast message during Round 5 of the accountable cgg+ ECDSA TSS signing protocol.
type SignRound5Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sigma         []byte   `protobuf:"bytes,1,opt,name=sigma,proto3" json:"sigma,omitempty"`
	BigHHat       []byte   `protobuf:"bytes,2,opt,name=big_h_hat,json=bigHHat,proto3" json:"big_h_hat,omitempty"`
	BigHHatProof  [][]byte `protobuf:"bytes,3,rep,name=big_h_hat_proof,json=bigHHatProof,proto3" json:"big_h_hat_proof,omitempty"`
	BigSigmaProof [][]byte `protobuf:"bytes,4,rep,name=big_sigma_proof,json=bigSigmaProof,proto3" json:"big_sigma_proof,omitempty"`
}

func (x *SignRound5Message) Reset() {
	*x = SignRound5Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_ecdsa_cggplus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound5Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound5Message) ProtoMessage() {}

func (x *SignRound5Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_cggplus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound5Message.ProtoReflect.Descriptor instead.
func (*SignRound5Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_cggplus_proto_rawDescGZIP(), []int{5}
}

func (x *SignRound5Message) GetSigma() []byte {
	if x != nil {
		return x.Sigma
	}
	return nil
}

func (x *SignRound5Message) GetBigHHat() []byte {
	if x != nil {
		return x.BigHHat
	}
	return nil
}

func (x *SignRound5Message) GetBigHHatProof() [][]byte {
	if x != nil {
		return x.BigHHatProof
	}
	return nil
}

func (x *SignRound5Message) GetBigSigmaProof() [][]byte {
	if x != nil {
		return x.BigSigmaProof
	}
	return nil
}

var File_protob_ecdsa_cggplus_proto protoreflect.FileDescriptor

var file_protob_ecdsa_cggplus_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2d, 0x63,
	0x67, 0x67, 0x70, 0x6c, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x73, 0x73, 0x6c, 0x69, 0x62, 0x2e, 0x65, 0x63, 0x64,
	0x73, 0x61, 0x2e, 0x63, 0x67, 0x67, 0x70, 0x6c, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x69, 0x67, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x69, 0x67, 0x47, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x67, 0x4b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x69, 0x67, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x73, 0x69, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x73, 0x69, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x62, 0x69, 0x67, 0x5f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x69, 0x67, 0x44, 0x12, 0x1a, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x64, 0x5f, 0x68, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x69, 0x67, 0x44, 0x48, 0x61, 0x74, 0x12,
	0x13, 0x0a, 0x05, 0x62, 0x69, 0x67, 0x5f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x69, 0x67, 0x46, 0x12, 0x1a, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x66, 0x5f, 0x68, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x69, 0x67, 0x46, 0x48, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x73, 0x69, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x70,
	0x73, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x73, 0x69, 0x5f, 0x68, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x73, 0x69, 0x48, 0x61, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x6d, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x73, 0x69, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x73, 0x69, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x62,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x73, 0x69, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x73, 0x69, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06,
	0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a,
	0x11, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x35, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f,
	0x68, 0x5f, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x69, 0x67,
	0x48, 0x48, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x62, 0x69, 0x67, 0x5f, 0x68, 0x5f, 0x68, 0x61,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62,
	0x69, 0x67, 0x48, 0x48, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x69, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x42, 0x0f, 0x5a, 0x0d, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2f, 0x63, 0x67, 0x67,
	0x70, 0x6c, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protob_ecdsa_cggplus_proto_rawDescOnce sync.Once
	file_protob_ecdsa_cggplus_proto_rawDescData = file_protob_ecdsa_cggplus_proto_rawDesc
)

func file_protob_ecdsa_cggplus_proto_rawDescGZIP() []byte {
	file_protob_ecdsa_cggplus_proto_rawDescOnce.Do(func() {
		file_protob_ecdsa_cggplus_proto_rawDescData = protoimpl.X.CompressGZIP(file_protob_ecdsa_cggplus_proto_rawDescData)
	})
	return file_protob_ecdsa_cggplus_proto_rawDescData
}

var file_protob_ecdsa_cggplus_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protob_ecdsa_cggplus_proto_goTypes = []interface{}{
	(*SignRound1Message)(nil),  // 0: binance.tsslib.ecdsa.cggplus.SignRound1Message
	(*SignRound2Message1)(nil), // 1: binance.tsslib.ecdsa.cggplus.SignRound2Message1
	(*SignRound2Message2)(nil), // 2: binance.tsslib.ecdsa.cggplus.SignRound2Message2
	(*SignRound3Message)(nil),  // 3: binance.tsslib.ecdsa.cggplus.SignRound3Message
	(*SignRound4Message)(nil),  // 4: binance.tsslib.ecdsa.cggplus.SignRound4Message
	(*SignRound5Message)(nil),  // 5: binance.tsslib.ecdsa.cggplus.SignRound5Message
}
var file_protob_ecdsa_cggplus_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protob_ecdsa_cggplus_proto_init() }
func file_protob_ecdsa_cggplus_proto_init() {
	if File_protob_ecdsa_cggplus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protob_ecdsa_cggplus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound1Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_cggplus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound2Message1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_cggplus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound2Message2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_cggplus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound3Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_cggplus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound4Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_ecdsa_cggplus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound5Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protob_ecdsa_cggplus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protob_ecdsa_cggplus_proto_goTypes,
		DependencyIndexes: file_protob_ecdsa_cggplus_proto_depIdxs,
		MessageInfos:      file_protob_ecdsa_cggplus_proto_msgTypes,
	}.Build()
	File_protob_ecdsa_cggplus_proto = out.File
	file_protob_ecdsa_cggplus_proto_rawDesc = nil
	file_protob_ecdsa_cggplus_proto_goTypes = nil
	file_protob_ecdsa_cggplus_proto_depIdxs = nil
}
