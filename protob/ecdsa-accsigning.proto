//  Portions Copyright (c) 2023, Circle Internet Financial, LTD.
//  All rights reserved
//  SPDX-License-Identifier: Apache-2.0


syntax = "proto3";
package binance.tsslib.ecdsa.accsigning;
option go_package = "ecdsa/accsigning";

/*
 * Represents a P2P message sent to each party during Round 1 of the Accountable ECDSA TSS signing protocol.
 */
message SignRound1Message1 {
    repeated bytes range_proof_alice = 1;
    repeated bytes proof_x_gamma = 2;
    repeated bytes proof_x_kw = 3;
}

/*
 * Represents a BROADCAST message sent to all parties during Round 1 of the Accountable ECDSA TSS signing protocol.
 */
message SignRound1Message2 {
    bytes c_a = 1;
    bytes x_gamma = 2;
    bytes x_kgamma =3;
    bytes x_kw = 4;
    repeated bytes proof_x_kgamma =5;
}

/*
 * Represents a P2P message sent to each party during Round 2 of the Accountable ECDSA TSS signing protocol.
 */
message SignRound2Message1 {
    bytes c_gamma = 1;
    bytes c_w = 2;
    repeated bytes proof_p = 3;
    repeated bytes proof_dl = 4;
}

/*
 * Represents a BROADCAST message sent to all parties during Round 2 of the Accountable ECDSA TSS signing protocol.
 */
message SignRound2Message {
    bytes recipient = 1;
    bytes c_alpha = 2;
    bytes c_beta = 3;
    bytes c_beta_prm = 4;
    bytes c_mu = 5;
    bytes c_nu = 6;
    bytes c_nu_prm = 7;
    repeated bytes proof_p = 8;
    repeated bytes proof_dl = 9;
    repeated bytes proof_beta = 10;
    repeated bytes proof_nu = 11;
}

/*
 * Represents a BROADCAST message sent to all parties during Round 3 of the Accountable ECDSA TSS signing protocol.
 */
message SignRound3Message {
    bytes delta = 1;
    bytes d = 2;
    repeated bytes proof = 3;
}

/*
 * Represents a BROADCAST message sent to all parties during Round 4 of the Accountable ECDSA TSS signing protocol.
 */
message SignRound4Message {
    repeated bytes gamma = 1;
    repeated bytes proof = 2;
}

/*
 * Represents a BROADCAST message sent to all parties during Round 4 of the Accountable ECDSA TSS signing protocol.
 */
message SignRound5Message {
    bytes s = 1;
    repeated bytes proof = 2;
}
